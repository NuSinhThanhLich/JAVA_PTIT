package com.mycompany.practice;

import java.io.PrintStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
import java.util.Vector;

public class Practice {

    public static void soMaxMin(int n, int s) {
        Stack<Integer> stk = new Stack<>();
        int dem = 0;
        String max_tmp = "";
        while (s > 0) {
            if (s > 9) {
                stk.push(9);
                s = s - 9;
            } else {
                stk.push(s);
                s = 0;
            }
            dem = stk.size();
            max_tmp += stk.peek();
        }
        
        if (dem == n) {
            String max = "";
            while (!stk.empty()) {
                System.out.print(stk.peek());
                max = Integer.toString(stk.peek()) + max;
                stk.pop();
            }
            System.out.printf(" %s", max);
        } else if (dem > n) {
            System.out.print("-1 -1");
        } else {
            Stack<Integer> tmp = stk;
            int dem1 = dem;
            //min
            System.out.print(1);
            while (dem < n - 1) {
                System.out.print(0);
                dem++;
            }
            System.out.print(tmp.peek() - 1);
            tmp.pop();
            while (!tmp.empty()) {
                System.out.print(tmp.peek());
                tmp.pop();
            }
            System.out.print(" ");
            //max
            System.out.print(max_tmp);
            while (dem1 < n) {
                System.out.print(0);
                dem1++;
            } 
        }
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
       int n = sc.nextInt();
       int s = sc.nextInt();
       // n chu so va tong = s
       
       if (n * 9 < s) {
           System.out.print("-1 -1");
           return;
       }
       if (n > 0 && s == 0) {
           System.out.print("-1 -1");
           return;
       }
       if (n == 1 && s == 0) {
           System.out.print("0 0");
           return;
       }
       
       soMaxMin(n,s);
    }
}
