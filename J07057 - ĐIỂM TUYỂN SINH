
import java.io.File;
import java.io.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.math.BigInteger;
import java.util.*;
import java.util.Arrays;
import java.lang.Math;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.text.DecimalFormat;
import static java.lang.Math.round;

class TS {
   static int id = 1;
   String code;
   String name;
   float score;
   String dantoc;
   int zone;
   String status;



   void input(Scanner sc,  SimpleDateFormat sdf) throws ParseException {

       if (id < 10) {
           this.code = "TS0";
       } else {
           this.code = "TS";
       }
       // no limit for id
       this.code += Integer.toString(id++);

       sc.nextLine();
       this.name = sc.nextLine();
       this.score = sc.nextFloat();
       sc.nextLine();
       this.dantoc = sc.nextLine();
       this.zone = sc.nextInt();

       name = configName(name);

       if (this.dantoc.compareTo("Kinh") != 0) {
           score += 1.5F;
       }

       if (this.zone == 1) {
           score += 1.5F;
       }
       if (this.zone == 2) {
           score += 1;
       }

       if (score >= 20.5) {
           status = "Do";
       } else {
           status = "Truot";
       }
   }

       String configName (String a) {
           String s = "";
           String[] k = a.trim().toLowerCase().split("\\s+");
           for (String m : k) {
               s += m.substring(0,1).toUpperCase() + m.substring(1) + " ";
           }
           return s;
       }

    void output() {
        // neu tron thi ko co .
        System.out.printf("%s %s%.1f %s\n", this.code, this.name, this.score, this.status);
    }
}

public class Practice {

    public static void main(String[] args) throws FileNotFoundException, ParseException {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        Scanner sc = new Scanner(new File("THISINH.in"));
        int n = sc.nextInt();
        Vector<TS> v = new Vector<>();
        for (int i = 0; i < n; i++) {
            TS a = new TS();
            a.input(sc, sdf);
            v.add(a);
        }
        
        Collections.sort(v, new Comparator<TS>() {
                    @Override
                    public int compare(TS a, TS b) {
                        if (a.score == b.score) {
                            if (a.code.compareTo(b.code) > 0) {
                                return 1;
                            } else {
                                return -1;
                            }
                        } else if (a.score > b.score) {
                            return -1;
                        } else {
                            return 1;
                        }
                    }
                }
        );
        for (int i = 0; i < n; i++) {
            v.get(i).output();
        }
        }
    }

