package com.mycompany.practice;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Deque;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
import java.util.Vector;
import java.util.*;

class KH {

    static int id = 1;
    String name;
    String code;
    int sl;

    void input(Scanner sc, SimpleDateFormat sdf) throws ParseException {
//        if (id < 10) {
//            code = "GV0";
//        } else {
//            code = "GV";
//        }
//        code += Integer.toString(id++);

        this.code = sc.next();
        sc.nextLine();
        this.name = sc.nextLine();
        
        this.sl = sc.nextInt();
        
    }

//    long tinhNgay(Date a, Date b) {
//        long cmp = b.getTime() - a.getTime();
//        cmp = cmp / (1000 * 60 * 60 * 24);
//        return cmp + 1;
//    }
//
    String configName(String s) {
        String a[] = s.trim().toLowerCase().split("\\s+");
        String ans = "";
        for (String i : a) {
            ans += i.substring(0, 1).toUpperCase() + i.substring(1) + " ";
        }
        return ans;
    }

    void output() {
        System.out.printf("%s %s %d\n", code, name, sl);
    }
}

public class Practice {

    public static void main(String[] args) throws ParseException, FileNotFoundException {
        Scanner sc = new Scanner(System.in);
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        int n = sc.nextInt();
        List<KH> l = new LinkedList<>();
       
        for (int i = 0; i < n; i++) {
            KH a = new KH();
            a.input(sc, sdf);
            l.add(a);
        }
        
        Collections.sort(l, new Comparator<KH>() {
            @Override
            public int compare(KH a, KH b) {
                if (a.sl == b.sl) {
                    if (a.code.compareTo(b.code) > 0) {
                        return 1; // tang dan
                    } else {
                        return -1;
                    }
                } else if (a.sl > b.sl) {
                    return -1; // giam dan
                } else {
                    return 1;
                }
            }
        });
        for (int i = 0; i < l.size(); i++) {
            l.get(i).output();
        }
        
    }
}
